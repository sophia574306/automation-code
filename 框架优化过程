1、响应提取的规则
   响应提取也是以json格式字符串传递，json里的key是变量名称，json里的value是jsonpath表达式
   例如：{"token":"$.access_token"}
   定义一个var_dict = {} 的字典来保存提取出来的所有的变量和值

2、变量引用规定${xxx}的形式，但是如何识别变量并将变量的值替换原来的位置
   {"Authorization": "${token}"}转换成{"Authorization": "xxxxx"}
   2.1 首先要匹配到这个目标字符串里的变量，并且得到变量的名字
       res = re.findall(r'\$\{(.+?)\}', string)  #findall可以匹配到目标的多个
   2.2 得到变量名字后从var_dict = {}字典中提取出变量对应的值
       再使用正则替换，将目标变量替换成变量对应的值
       string = re.sub(r'\$\{'+var_name+'\}', var_value, string)
   2.3 封装该方法，在utils下封装parser.py，增加全局变量存储的对象vars_dict，以及正则替换的方法
       vars_dict={} #用来存储所有响应中提取到的变量和值
        def regx_sub(string):
            res = re.findall(r'\$\{(.+?)\}', string)  # findall可以匹配到目标的多个
            for var_name in res:
                var_value = vars_dict[var_name]
                string = re.sub(r'\$\{'+var_name+'\}', var_value, string)
            return string
   2.4 在keywords_run.py中增加变量替换的方法
3、框架中函数调用如何进行
    定义采用${{xxx(yy)}}为调用某个函数或者方法，并且将函数返回值替换该位置
    例如：{
        "username":"sophia",
        "password":"${{md5(123456)}}",
        "captcha":"1512",
        "uuid":"qwertttlk"
    }
    将${{md5(123456)}}替换为xxxx
    3.1 首先匹配到目标字符串中有函数，得到函数名和参数
    3.2 利用python里的反射，去指定模块寻到该函数，得到该函数对象并执行函数
    3.3 利用正则替换目标
    3.4 在 paser.py中封装
    3.5 在keywords中进行调用

==============================================================================================
1、数据库断言设计思路：
    {
        "sql"："select uname,nickname from mtxshop_member.es_member where uname='sophia';",
        "uname":"$.username",
        "nickname":"$.nickname"
        }
2、增加数据库操作的工具类
    2.1 在utils下创建一个db操作的文件
    2.2 为了统一管理数据库基本信息，增加一个配置文件db.yml
    2.3 如何读取配置文件？
        创建file_load.py读取配置文件
3、解析数据库断言中的jsonpath，由于jsonpath返回的数据是列表，不确定是否会返回多个
    封装jsonpath解析，业务需求需要一个时则返回一个值，需要多个时则返回多个值
4、针对数据库断言做处理


=======================================20210324=======================================================
1、优化目录，setting.py
2、优化keyword_run文件，进行相对应的封装处理
    2.1 替换excel里的数据，看是否有函数或者变量引用
    2.2 根据headers里的Content-Type来决定传递什么样的参数
    2.3 响应状态码断言
    2.4 业务断言封装
    2.5 响应提取封装
    2.6 数据库断言封装
    2.7 将keywords_run.py修改成类的方式
        初始化方法setup_class来初始化client对象和host
3、有多个sheet表
    3.1 将keyword_run_new进行拆分
        新建一个keyword_util的文件，来存储keywords_run里的方法
    3.2 一个sheet工作表作为一个python测试文件
    3.3 工作台中文乱码优化
4、增加日志
    4.1 在requests_client模块下添加日志
    4.2 引用日志模块，封装日志对象

==========================20210327=================================
1、上传文件
    1.1 上传文件的方式
    params = {
    'scene':'goods'
    }
    files = {'文件名称'，open('文件路径'，'rb),'image/jpeg'}
    1.2 如何兼容框架
    查询参数：params
    路径参数
    body参数：params、json
    因此需要优化原有的excel参数设计
    post或者put接口：
        查询参数统一用{"data":{xxx}}
        如果是body参数那么表单型用{"data":{xxx}}，json型用{"json":{xxx}}
        如果有路径参数，那么加一个{"path":{xxxx}}
    如果是get接口：
    查询参数用{"params":{xxxxx}}
    针对以上优化，要在keywords_util中优化参数的解析

2、生成测试报告
    1.执行pytest -s --alluredir report --clean-alluredir keywords（根目录执行）
    2.allure generate report -o report/html
        allure generate report -o  report/html/ --clean 可以清除上一次的html报告

    3.优化allure报告，添加allure标签


==========================20210329=================================
1、分层思想
2、api层：将每一个单独的接口进行封装
3、testcase层：将单独的或者多个接口组装成一个测试用例
4、在api下创建baseapi文件，里面写所有接口的基类，抽取所有api的共有属性或者方法进行封装

==========================20210402=================================
1、token传递优化
    在基类中定义一个类属性 token = None
    在基类中修改headers为{Authorization": token}
    在每一个api接口类中注释掉原有的headers字段，并且去掉__init__里的token参数
    在测试用例层的setup_class中调用登录接口给BaseApi.token进行赋值
2、在每个测试文件里都写了setup_class针对BaseApi.token进行赋值，如何优化？
    在pytest里fixture可以用来做优化
    在conftest.py中创建一个get_token函数用来给BaseApi.token进行赋值，
    每个用例都需要手动调用fixture，为了解决此问题可以将fixture设置autouse=True，autouse指的是在作用范围内自动执行
3、token失效如何处理
    fixture有作用域，在每个测试用例执行前获取token，将fixtue作用域修改为function
4、接口还有其它headers，在需要特定header信息的接口中，修改self.headers['xxxx'] = 'xxxx'
5、多用户系统权限不一样，token不一样，目前设计BaseApi中只有一个token，不同权限的token会产生覆盖
    是否可以将token区分，在BaseApi中定义两个token，一个是buyer_token,一个是seller_token
    针对不同的服务权限新增baseapi，比如BaseBuyerApi,让它继承自统一的BaseApi，然后重新指定
    headers={"Authorization": BaseBuyerApi.token},


==========================20210407=================================
1、增加aes/rsa加解密
1.1 aes私钥加密
    有私钥，一般都是由开发提供的，其长度一般是16位
    ase是对称加密，加密需要私钥，解密的时候也需要同样的私钥
    步骤：
    安装相关库：
    windows :需要安装vc++14
    mac：pip install pycrypto -i http://pypi.douban.com/simple --trustd-host pypi.douban.com
1.2 rsa
    A给B传数据，用B的公钥给数据加密，B收到数据后用B的私钥解密，B处理完数据后用A的公钥加密返回数据给A，A用自己的私钥进行解密
2、随机数生成
3、增加统一入口
    1.增加pytest.ini 文件
    2.执行run.py
4、自动化框架版本管理
    4.1 git版本管理工具的安装
        下载客户端配置环境变量，git/bin   git/user/bin
        以码云平台作为服务端
        1、注册
        2、在本地配置自己的git用户，先在码云平台创建一个仓库

==========================20210410=================================
1、持续集成(CICD)
    CI:持续集成   频繁的将代码集成到主干，代码集成到主干之前必须通过自动化测试
    CD:持续交付以及持续部署
        持续交付：频繁的将软件版本交付给质量团队(开发代码部署到测试环境)
        持续部署：指的是部署到生产环境
    自动打包、自动部署环境、自动执行回归测试的自动化脚本


